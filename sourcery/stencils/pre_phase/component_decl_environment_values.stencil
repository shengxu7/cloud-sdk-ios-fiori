{# Utility function which returns the correct Style struct, for the unwrapped (non-optional) var type #}
{% macro _StyleType unwrappedTypeName %}
{% if unwrappedTypeName == "String" or unwrappedTypeName == "[String]" %}
TextStyle
{% elif unwrappedTypeName == "Image" %}
ImageStyle
{% else %}
NothingStyle
{% endif %}
{% endmacro %}

{% macro StyleType unwrappedTypeName %}{% set tmp %}{% call _StyleType unwrappedTypeName %}{% endset %}{{tmp|removeNewlines}}{% endmacro %}
// sourcery:file:EnvironmentValues+Styles.generated.swift
import SwiftUI
{% for type in types.implementing._ComponentGenerating %}

extension EnvironmentValues {
{% for variable in type.variables where variable|!annotated:"no_style" %}
{% set keyname %}{{variable.name | upperFirstLetter }}StyleKey{% endset %}
{% set AStyle %}{% call StyleType variable.typeName.unwrappedTypeName %}{% endset %}
    public var {{variable.name}}Style: {{AStyle}} {
        get { return self[{{keyname}}.self] }
        set { self[{{keyname}}.self] = newValue }
    }

    public var {{variable.name}}Modifier: AnyViewModifier {
        get { return self[{{variable.name | upperFirstLetter }}ModifierKey.self] }
        set { self[{{variable.name | upperFirstLetter }}ModifierKey.self] = newValue }
    }

{% endfor %}
}

public extension View {
{% for variable in type.variables where variable|!annotated:"no_style" %}
{% set AStyle %}{% call StyleType variable.typeName.unwrappedTypeName %}{% endset %}

    @ViewBuilder
    func {{variable.name}}Style(_ style: {{AStyle}}, isAppending: Bool = true) -> some View {
        if isAppending {
            transformEnvironment(\.{{variable.name}}Style) { $0 = $0.merging(style) }
        } else {
            environment(\.{{variable.name}}Style, style)
        }
    }

    @ViewBuilder
    func {{variable.name}}Modifier<V: View>(_ transform: @escaping (AnyViewModifier.Content) -> V) -> some View {
        self.environment(\.{{variable.name}}Modifier, AnyViewModifier(transform))
    }

    func {{variable.name}}StyleClass(_ class: String, isAppending: Bool = true) -> some View {
        self.{{variable.name}}StyleClass([`class`], isAppending: isAppending)
    }

    func {{variable.name}}StyleClass(_ classPath: [String], isAppending: Bool = true) -> some View {
        return transformEnvironment(\.{{variable.name}}Modifier) {
            switch StyleCache.shared.resolveModifier(for: classPath) {
                case .success(let resolved):
                    if isAppending {
                        let copy = $0; $0 = AnyViewModifier({ content in content.modifier(resolved.concat(copy)) })
                    } else {
                        $0 = resolved
                    }
                case .failure(_):  break
            }
        }
    }
{% endfor %}
}

{% endfor %}
// sourcery:end